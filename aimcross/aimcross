#!/bin/bash

PROGRAM="aimcross"

VERSION="$PROGRAM 0.1"

####################################################################################################
# Default configuration
####################################################################################################

# Installation paths
RUR_BIN_PATH=/usr/bin
RUR_SHARE_PATH=/usr/share/rur
RUR_TEMPLATE_PATH=$RUR_SHARE_PATH/templates
RUR_BACKENDS_PATH=$RUR_SHARE_PATH/backends
RUR_CONFIG_PATH=/etc/rur

# Configuration files
RUR_CONFIG_FILE_BACKENDS=${RUR_CONFIG_PATH}/backends.conf
RUR_CONFIG_FILE_BACKENDS_CMAKE=${RUR_CONFIG_PATH}/backends.cmake

# Prepend with destination dir if DESTDIR is present
RUR_SHARE_PATH="$DESTDIR/$RUR_SHARE_PATH"
RUR_TEMPLATE_PATH="$DESTDIR/$RUR_TEMPLATE_PATH"
RUR_BACKENDS_PATH="$DESTDIR/$RUR_BACKENDS_PATH"
RUR_CONFIG_PATH="$DESTDIR/$RUR_CONFIG_PATH"

####################################################################################################
# User configuration
####################################################################################################

if [ -e ${RUR_CONFIG_FILE_BACKENDS} ]; then
	source $RUR_CONFIG_FILE_BACKENDS
fi

####################################################################################################
# Checks
####################################################################################################

if [[ "$1" == "" ]]
then
	echo "No args supplied! Run $0 -h for more info"
	exit 1
fi

if [[ "$1" == "-h" ]]
then
	echo $VERSION \- Usage
	echo 
	echo $PROGRAM \"ModuleName\"
	echo
	exit 0 
fi 

modulename="$1"

# Check if there are no whitespaces
mn_sanity_check=${modulename//[[:space:]]}

if [[ "$mn_sanity_check" == "$1" ]]; then
	if [[ "$1" == *Module ]]; then
		echo "Update $1"
	else
		echo "Please, end the module with \"Module\""
		exit 1
	fi
else
	echo "Please, do not use whitespaces"
	exit 1
fi

####################################################################################################
# Start
####################################################################################################

cd "$modulename"

################################################################################
# Checking and including stuff
################################################################################

target=$1

if [[ "$target" == "" ]]
then
	echo "Use $0 with argument \"target\""
	exit 1
fi

if [[ "$target" != "blackfin" ]]
then
	echo "Only target \"blackfin\" is currently supported"
	exit 1
fi

echo "Set installation dir and get color config"
source /etc/apt-cross/ac-build/ac_get.sh

echo "Get platform specific compiler"
source /etc/apt-cross/ac-platform/$target.sh

cd $AC_INSTALL_DIR
echo "Display directories in $AC_INSTALL_DIR: "
echo "----------------------------------------"
LIST="ls -d -1 */"
eval $LIST
echo "----------------------------------------"

echo "Go to $extracted_dir_mask"
cd $extracted_dir_mask
package_dir=$(pwd)
echo "Arrived in $package_dir"

################################################################################
# Requires cmake build system
################################################################################

LOG_FILE=make.log
 
# Sets "CORES" and "AVAILABLE_CORES"
set_cores() {
	CORES=1
	AVAILABLE_CORES=`nproc`
	echo "We will compile on ${CORES} of a total of ${AVAILABLE_CORES} cores"
	echo "Note that Unity/Ubuntu grinds to a halt if this reaches the total number of cores available)"
}
 
set_verbosity() {
	MAKE_VERBOSITY="VERBOSE=1"
	MAKE_VERBOSITY=
}
 
set_timing() {
        MAKE_TIMING=time
}
 
# Create log file and write everything to it
# Prerequisite for check_errors and check_warnings
set_logging() {
	rm -f ${LOG_FILE}
	PIPE_TO_FILE="3>&1 1>&2 2>&3 | tee ${LOG_FILE}"
}
 
# A log file is a prerequisite, assumes we are still in the build directory
# so create the script file in the parent directory ..
check_errors() {
	echo "Check for errors"
	CHECK_FOR_ERROR="egrep '(error|instantiated from|relocation truncated)'"
	CHECK_FOR_ERROR_CMD="cat ${LOG_FILE} | ${CHECK_FOR_ERROR} | head -n 1"
	ERRORS=`eval ${CHECK_FOR_ERROR_CMD}`
	ERROR_SCRIPT=../check_error.sh
	rm -f ${ERROR_SCRIPT}
	if [ -n "$ERRORS" ]; then
		ERROR_FILE=`eval ${CHECK_FOR_ERROR_CMD} | cut -d':' -f1`
		ERROR_LINE=`eval ${CHECK_FOR_ERROR_CMD} | cut -d':' -f2`
		echo "#!/bin/bash" >> ${ERROR_SCRIPT}
		echo "# -- automatically generated --" >> ${ERROR_SCRIPT}
		echo "gedit ${ERROR_FILE} +${ERROR_LINE}" >> ${ERROR_SCRIPT}
		echo "echo \"Open ${ERROR_FILE} at line ${ERROR_LINE}\"" >> ${ERROR_SCRIPT}
		echo "echo \"because of error: \"" >> ${ERROR_SCRIPT}
		ESCAPE_ERRORS=`echo ${ERRORS} | sed 's|["'\''\`]||g'`
		echo "echo \"   ${ESCAPE_ERRORS} \"" >> ${ERROR_SCRIPT}
		chmod a+x ${ERROR_SCRIPT}
		echo "There are errors! Run ./check_error.sh"
	else
		echo "There are no errors found"
	fi
}
 
check_warnings() {
        echo "Check for warnings"
        WARNINGS=`cat ${LOG_FILE} | grep "warning"`
        WARNING_SCRIPT=../check_warning.sh
        rm -f ${WARNING_SCRIPT}
        if [ -n "$WARNINGS" ]; then
                WARNING_FILE=`cat ${LOG_FILE} | grep "warning" | cut -d':' -f1`
                WARNING_LINE=`cat ${LOG_FILE} | grep "warning" | cut -d':' -f2`
                echo "gedit ${WARNING_FILE} +${WARNING_LINE}" >> ${WARNING_SCRIPT}
                chmod a+x ${WARNING_SCRIPT}
                echo "There are warnings! Run ./check_warning.sh"
        else
                echo "There are no warnings found"
        fi
}
 
make_and_check() {
        MAKE_COMMAND="${MAKE_VERBOSITY} ${MAKE_TIMING} make -j${CORES} ${PIPE_TO_FILE}"
        echo "We will perform the following command: "
        echo "  ${MAKE_COMMAND}"
        eval ${MAKE_COMMAND}
 
        check_errors
        check_warnings
}

final_install() {
	make install
}
 
build() {
 	# Create another directory to build out-of-source
        BUILD_DIR="build_${target}"
        mkdir -p ${BUILD_DIR}
        cd ${BUILD_DIR}
 
        set_cores
        set_verbosity
        set_timing
        set_logging
 
        echo "We use the toolchain and disable the tests because of some awkward error"
        echo "Note that CMAKE_TOOLCHAIN_FILE will only be used on the first run"
        echo "it is not allowed to change an existing build tree"
        echo "see: http://www.cmake.org/pipermail/cmake/2011-February/042554.html"
#        cmake -C ../${target}.initial.cmake -DCMAKE_TOOLCHAIN_FILE=../$target.toolchain.cmake \
#                ..
        cmake ..
 
        make_and_check
#	final_install
 
#        echo "The result of our compilation efforts:"
        cd ..
#        file ${BUILD_DIR}/bin/*

}
 
echo "Build for platform $target"
build

