#!/bin/bash

PROGRAM="aimrun"

VERSION="$PROGRAM 0.1"

####################################################################################################
# Default configuration
####################################################################################################

# Installation paths
RUR_BIN_PATH=/usr/bin
RUR_SHARE_PATH=/usr/share/rur
RUR_TEMPLATE_PATH=$RUR_SHARE_PATH/templates
RUR_BACKENDS_PATH=$RUR_SHARE_PATH/backends
RUR_CONFIG_PATH=/etc/rur

# Working paths
RUR_DATA_PATH=$HOME/.rur/data
RUR_REGISTRY_PATH=$RUR_DATA_PATH/registry

# Configuration files
RUR_CONFIG_FILE_BACKENDS=${RUR_CONFIG_PATH}/backends.conf
RUR_CONFIG_FILE_BACKENDS_CMAKE=${RUR_CONFIG_PATH}/backends.cmake

# Data(base) files
AIM_REGISTRY=${RUR_DATA_PATH}/aim_registry.txt

# Prepend with destination dir if DESTDIR is present
RUR_SHARE_PATH="$DESTDIR/$RUR_SHARE_PATH"
RUR_TEMPLATE_PATH="$DESTDIR/$RUR_TEMPLATE_PATH"
RUR_BACKENDS_PATH="$DESTDIR/$RUR_BACKENDS_PATH"
RUR_CONFIG_PATH="$DESTDIR/$RUR_CONFIG_PATH"


####################################################################################################
# User configuration
####################################################################################################

if [ -e ${RUR_CONFIG_FILE_BACKENDS} ]; then
	source $RUR_CONFIG_FILE_BACKENDS
fi

####################################################################################################
# Checks
####################################################################################################

# For default execution of things that only run on the server we need 2 arguments
if [[ $# -lt 2 ]]
then
	echo "[#] Not enough args supplied! Run $0 -h for more info"
	echo "[#]  (most often) because you forget an \"id\" for the module"
	exit 1
fi

# For execution of modules that connect to CommonSense we need 4 arguments
# We do not check for that here...

if [[ "$1" == "-h" ]]
then
	echo $VERSION \- Usage
	echo 
	echo $PROGRAM \"ModuleName\" \"ModuleId\"
	echo
	exit 0 
fi 

MODULE_NAME=${1%/}
ModuleId=${2%/}

echo "[#] Search in ${AIM_REGISTRY}"
SUCCESS=false
MODULE_FULLNAME=
while read LINE; do
	MODULE_I=`echo "$LINE" | cut -d'=' -f 1`
	M_I_STRIPPED=${MODULE_I//[[:space:]]}
#	echo $M_I_STRIPPED
	if [[ "$M_I_STRIPPED" == "$1" ]]; then
#		echo "$MODULE_NAME found. Run it"
		MODULE_FULLNAME=`echo "$LINE" | cut -d'=' -f 2`
		SUCCESS=true
		break
	fi
done < "${AIM_REGISTRY}"

# Shift so, $@ becomes second argument (id) and further on
shift

if [[ $SUCCESS == true ]]; then
	# echo "Kill previous one"
	# pkill -9 $MODULE_NAME
	echo "[#] Run $MODULE_FULLNAME/build/$MODULE_NAME $@ (so with all arguments coming from the command-line)"
	echo "[#] The following output is coming from the module itself:"
	# yarp clean
	$MODULE_FULLNAME/build/$MODULE_NAME "$@"
else
	echo "[#] No such module found ($MODULE_NAME)"
fi

echo "[#] Exit of ($MODULE_NAME)"
exit 0

