##########################################################################################
#               _/\/\/\/\/\____/\/\/\/\__/\/\/\/\/\____/\/\_______                       #
#               _/\/\____/\/\____/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\/\/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\__/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\____/\/\__/\/\/\/\__/\/\/\/\/\____/\/\/\/\/\_                       #
#               __________________________________________________                       #
##########################################################################################
# Part of RIDL, the RUR IDL builder which generates modules for middlewares, including 
# lightweight (robotic) middleware like YARP. 
# This makefile is part of a cmake build system. The code falls under the Lesser General 
# Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Oct. 23, 2012
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2012 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
  cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
  cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/aim/cmake/" "${CMAKE_SOURCE_DIR}/cmake/")

MESSAGE("Search for FindX files in ${CMAKE_SOURCE_DIR}/aim/cmake")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD ( "Requires an out of source build." ) 

# Build options
OPTION(BUILD_YARP      "Build module with YARP" OFF)
OPTION(BUILD_ROS       "Build module with ROS" OFF)
OPTION(BUILD_ZEROMQ    "Build module with ZeroMQ" OFF)
OPTION(BUILD_STANDARD  "Default build option" ON)

# Check first if on command line CMAKE has set one of the options
IF (NOT (BUILD_YARP OR BUILD_ROS OR BUILD_ZEROMQ))
  # If not, load the option from file
  INCLUDE(default.cmake)
  INCLUDE(local.cmake OPTIONAL)
ENDIF()

# Check again if one of the options has turned on from one of the .cmake files
IF (BUILD_YARP OR BUILD_ROS OR BUILD_ZEROMQ)
  SET(BUILD_STANDARD OFF)
ENDIF ()

INCLUDE(~/.rur/backends_path.cmake OPTIONAL)

# Set commands for header generation
IF (BUILD_YARP) 
  SET(MIDDLEWARE "yarp")
ENDIF ()

IF (BUILD_ROS) 
  SET(MIDDLEWARE "ros")
ENDIF ()

IF (BUILD_ZEROMQ) 
  SET(MIDDLEWARE "zeromq")
ENDIF ()

IF (BUILD_STANDARD) 
  SET(MIDDLEWARE "standard")
ENDIF ()

# Generate header files
MESSAGE("Run cd ${CMAKE_SOURCE_DIR}/aim/scripts && ./build.sh ${MIDDLEWARE} ${BACKENDS_PATH}")
EXEC_PROGRAM("cd ${CMAKE_SOURCE_DIR}/aim/scripts && ./build.sh ${MIDDLEWARE} ${BACKENDS_PATH}")

# Write the (backend) configuration
CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/aim/config.h.cmake ${CMAKE_SOURCE_DIR}/aim/inc/Config.h )

# Find all cmake packages
IF (BUILD_YARP)
  MESSAGE("YARP build, useful for YARP middleware")
  FIND_PACKAGE(YARP REQUIRED)
  INCLUDE_DIRECTORIES(${YARP_INCLUDE_DIRS})
  SET(LIBS ${LIBS} ${YARP_LIBRARIES})
ENDIF (BUILD_YARP)

IF (BUILD_ROS)
  MESSAGE("ROS build, useful for ROS middleware")
  MESSAGE("PROJECT_SOURCE_DIR = ${PROJECT_SOURCE_DIR}")
#  SET (PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/aim")
#  MESSAGE("PROJECT_SOURCE_DIR = ${PROJECT_SOURCE_DIR}")
#  SET (ROS_PACKAGE_PATH "${ROS_PACKAGE_PATH}:${PROJECT_SOURCE_DIR}")
  MESSAGE("ROS_PACKAGE_PATH = $ENV{ROS_PACKAGE_PATH}")
  IF (NOT DEFINED ENV{ROS_ROOT})
    MESSAGE(FATAL_ERROR "The $ROS_ROOT environmental variable needs to be defined beforehand. Did you source /opt/ros/groovy/setup.bash?")
  ENDIF()
  include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
  rosbuild_init()
ENDIF (BUILD_ROS)

IF (BUILD_ZEROMQ)
  MESSAGE("ZeroMQ build, useful for ZeroMQ message queues")
  FIND_PACKAGE(ZMQ REQUIRED)
  INCLUDE_DIRECTORIES(${ZMQ_INCLUDE_DIRS} PARENT_SCOPE)
  SET(LIBS ${LIBS} ${ZMQ_LIBRARIES})

  FIND_PACKAGE(JsonSpirit REQUIRED)
  INCLUDE_DIRECTORIES(${JSON_SPIRIT_INCLUDE_DIRS} PARENT_SCOPE)
  SET(LIBS ${LIBS} ${JSON_SPIRIT_LIBRARY})

  #FIND_PACKAGE(Librt REQUIRED)
  SET(LIBS ${LIBS} rt)
ENDIF (BUILD_ZEROMQ)

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "inc")

# Set LIBS to PARENT_SCOPE OR LIBS here will not be "seen" by the parent CMakeLists.txt file
SET(LIBS ${LIBS} PARENT_SCOPE)

# Warning for user when standard build
IF (BUILD_STANDARD)
  MESSAGE("[!] Standard build, not usable in middleware yet")
ENDIF (BUILD_STANDARD)

MESSAGE("[*] Libraries to be included for middleware purposes: ${LIBS}")

# Search for functional source code
FILE(GLOB aim_source ${SOURCE_DIR}/*.cpp ${SOURCE_DIR}/*.cc ${SOURCE_DIR}/*.c)
FILE(GLOB aim_header ${INCLUDE_DIR}/*.h)

SET(AIM_FILES ${aim_header} PARENT_SCOPE)

