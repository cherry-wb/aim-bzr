##########################################################################################
#               _/\/\/\/\/\____/\/\/\/\__/\/\/\/\/\____/\/\_______                       #
#               _/\/\____/\/\____/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\/\/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\__/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\____/\/\__/\/\/\/\__/\/\/\/\/\____/\/\/\/\/\_                       #
#               __________________________________________________                       #
##########################################################################################
# Part of RIDL, the RUR IDL builder which generates modules for middlewares, including 
# lightweight (robotic) middleware like YARP. 
# This makefile is part of a cmake build system. The code falls under the Lesser General 
# Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Nov 7, 2011
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2011 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

# Set name of project
SET(PROJECT_NAME "RoombaModule")

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
	"${PROJECT_NAME} requires an out of source build."
)

# Start a project
PROJECT(${PROJECT_NAME})

# Include aim stuff
ADD_SUBDIRECTORY(aim)

# Find all cmake packages, shared libraries as well as header files
FIND_PACKAGE(MADP REQUIRED)
INCLUDE_DIRECTORIES(${MADP_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${MADP_LIBRARIES})

FIND_PACKAGE(Boost REQUIRED)
INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIR})
#LIST(APPEND LIBS ${BOOST_FILESYSTEM_LIBRARY})
LIST(APPEND LIBS ${BOOST_SERIALIZATION_LIBRARY})

# The new compiler is required
SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=c++0x)

# Some debug information
MESSAGE("[*] \"${PROJECT_NAME}\" uses the following CXX flags: \"${CMAKE_CXX_FLAGS}\" (can be empty)")
MESSAGE ("[*] Libraries included: ${LIBS}")

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "inc")

# Search for functional source code
FILE(GLOB folder_source ${SOURCE_DIR}/*.cpp ${SOURCE_DIR}/*.cc ${SOURCE_DIR}/*.c)
FILE(GLOB folder_header ${INCLUDE_DIR}/*.h)
SOURCE_GROUP("Source files" FILES ${folder_source})
SOURCE_GROUP("Header files" FILES ${folder_header})

# Automatically add include directories if needed.
FOREACH(header_file ${folder_header})
  GET_FILENAME_COMPONENT(p ${header_file} PATH)
  INCLUDE_DIRECTORIES(${p})
ENDFOREACH(header_file ${folder_header})

# For references to header files
INCLUDE_DIRECTORIES(aim/inc)

MESSAGE ("[*] Files included: ${AIM_FILES}")

# Set up our main executable.
IF(FOLDER_SOURCE STREQUAL "")
  MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ELSE ()
  ADD_EXECUTABLE(${PROJECT_NAME} ${folder_source} ${folder_header} ${AIM_FILES})
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})
  install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)   
ENDIF ()

